{"pageProps":{"slug":"jest-react","title":"Tìm hiểu về Jestjs, viết unit test cho javascript","date":"2022-03-05","description":"Jestjs là một JavaScript Testing Framework khá là dễ sử dụng và cài đặt, tuy nhiên vẫn đầy đủ tính năng để bạn có thể sử dụng. Bài viết này mình xin giới thiệu một số tính năng cơ bản của jest cùng với một số ví dụ.","tags":["reactjs"],"content":"<h1>Tìm hiểu về Jestjs, viết unit test cho javascript</h1>\n<p>Jestjs là một JavaScript Testing Framework khá là dễ sử dụng và cài đặt, tuy nhiên vẫn đầy đủ tính năng để bạn có thể sử dụng :clap:\r\nBài viết này mình xin giới thiệu một số tính năng cơ bản của jest cùng với một số ví dụ.</p>\n<h2>Cài đặt</h2>\n<p>Cài đặt Jest khá đơn giản:</p>\n<pre><code class=\"hljs language-sql\">yarn <span class=\"hljs-keyword\">add</span> <span class=\"hljs-comment\">--dev jest</span>\n</code></pre>\n<p>hoặc</p>\n<pre><code class=\"hljs language-css\">npm install <span class=\"hljs-attr\">--save-dev</span> jest\n</code></pre>\n<p>Sau đó thêm đoạn code sau vào file package.json:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">\"test\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"jest\"</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Tiếp theo mình có ví dụ một file test: <code>math.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">sum</span>(<span class=\"hljs-params\">a, b</span>) {\r\n  <span class=\"hljs-keyword\">return</span> a + b;\r\n}\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title hljs-class\">MathJS</span> = {\r\n  sum,\r\n};\r\n\r\n<span class=\"hljs-variable hljs-language\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title hljs-class\">MathJS</span>;\n</code></pre>\n<p>Để viết test cho file trên mình tạo file <code>test/math.test.js</code>, đuôi file là test.js sẽ nói cho jest biết đây là file test của bạn.</p>\n<pre><code class=\"hljs language-scss\">const MathJS = <span class=\"hljs-built_in\">require</span>('../math');\r\n\r\n<span class=\"hljs-built_in\">it</span>('Adds <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span> to equals <span class=\"hljs-number\">2</span>', () => {\r\n  <span class=\"hljs-built_in\">expect</span>(MathJS.sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>))<span class=\"hljs-selector-class\">.toBe</span>(<span class=\"hljs-number\">2</span>);\r\n});\r\n\n</code></pre>\n<p>Sau đó chạy <code>yarn test</code> hoặc <code>npm run test</code>.</p>\n<p><img src=\"https://images.viblo.asia/9692954e-c671-4dcd-b028-dc188e860bea.png\" alt=\"\"></p>\n<h1>Các Matchers trong Jest</h1>\n<p>Ở trong đoạn code trên:</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-built_in\">expect</span>(MathJS.sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>))<span class=\"hljs-selector-class\">.toBe</span>(<span class=\"hljs-number\">2</span>);\n</code></pre>\n<p><code>.toBe()</code> chính là một matcher trong jest. Nó giống như phép so sánh bằng bình thường vậy. Ví dụ:</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-built_in\">expect</span>(result)<span class=\"hljs-selector-class\">.toBe</span>(<span class=\"hljs-number\">2</span>);\r\n<span class=\"hljs-built_in\">expect</span>(result)<span class=\"hljs-selector-class\">.toBe</span>(true);\r\n<span class=\"hljs-built_in\">expect</span>(result)<span class=\"hljs-selector-class\">.toBe</span>({a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span>});\n</code></pre>\n<p>Tuy nhiên khi so sánh một Object bạn nên sử dụng <code>.toEqual()</code>\r\nLý do là vì <code>.toBe</code> thực tế sử dụng <code>===</code> để so sánh và đưa ra kết quả. Và chúng ta đều biết trong javascript:</p>\n<pre><code class=\"hljs language-js\">a = {};\r\nb = {};\r\na === b;\r\n=> <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p>Còn <code>.toEqual()</code> theo như Jest sẽ lần lượt kiểm tra tất các trường của Object, hoặc mảng để so sánh.\r\nVì vậy thay vì viết:</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-built_in\">expect</span>(result)<span class=\"hljs-selector-class\">.toBe</span>({a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span>});\n</code></pre>\n<p>Hãy viết:</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-built_in\">expect</span>(result)<span class=\"hljs-selector-class\">.toEqual</span>({a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span>});\n</code></pre>\n<p>Ngoài ra còn các matchers khác:</p>\n<h3>Truthiness</h3>\n<ul>\n<li><code>toBeNull</code> so sánh với giá trị <code>null</code>.</li>\n<li><code>toBeUndefined</code> so sánh với giá trị <code>undefined</code>.</li>\n<li><code>toBeDefined</code> là hàm cho kết quả ngược lại <code>toBeUndefined</code>.</li>\n<li><code>toBeTruthy</code> so sánh với giá trị true.</li>\n<li><code>toBeFalsy</code> so sánh với giá trị false.</li>\n</ul>\n<h3>Numbers</h3>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-built_in\">it</span>('two plus two', () => {\r\n  const value = <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>;\r\n  <span class=\"hljs-built_in\">expect</span>(value)<span class=\"hljs-selector-class\">.toBeGreaterThan</span>(<span class=\"hljs-number\">3</span>);\r\n  <span class=\"hljs-built_in\">expect</span>(value)<span class=\"hljs-selector-class\">.toBeGreaterThanOrEqual</span>(<span class=\"hljs-number\">3.5</span>);\r\n  <span class=\"hljs-built_in\">expect</span>(value)<span class=\"hljs-selector-class\">.toBeLessThan</span>(<span class=\"hljs-number\">5</span>);\r\n  <span class=\"hljs-built_in\">expect</span>(value)<span class=\"hljs-selector-class\">.toBeLessThanOrEqual</span>(<span class=\"hljs-number\">4.5</span>);\r\n\r\n  <span class=\"hljs-comment\">// toBe and toEqual are equivalent for numbers</span>\r\n  <span class=\"hljs-built_in\">expect</span>(value)<span class=\"hljs-selector-class\">.toBe</span>(<span class=\"hljs-number\">4</span>);\r\n  <span class=\"hljs-built_in\">expect</span>(value)<span class=\"hljs-selector-class\">.toEqual</span>(<span class=\"hljs-number\">4</span>);\r\n});\n</code></pre>\n<p>Đối với số thập phân, bạn nên sử dụng <code>toBeCloseTo</code>:</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-built_in\">it</span>('adding floating point numbers', () => {\r\n  const value = <span class=\"hljs-number\">0.1</span> + <span class=\"hljs-number\">0.2</span>;\r\n  <span class=\"hljs-comment\">//expect(value).toBe(0.3);           This won't work because of rounding error</span>\r\n  <span class=\"hljs-built_in\">expect</span>(value)<span class=\"hljs-selector-class\">.toBeCloseTo</span>(<span class=\"hljs-number\">0.3</span>); <span class=\"hljs-comment\">// This works.</span>\r\n});\n</code></pre>\n<h3>String</h3>\n<p>Bạn có thể kiểm tra một đoạn văn bản với regular expressions bằng <code>toMatch</code>:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title hljs-function\">it</span>(<span class=\"hljs-string\">'there is no I in team'</span>, <span class=\"hljs-function\">() =></span> {\r\n  <span class=\"hljs-title hljs-function\">expect</span>(<span class=\"hljs-string\">'team'</span>).<span class=\"hljs-property\">not</span>.<span class=\"hljs-title hljs-function\">toMatch</span>(<span class=\"hljs-regexp\">/I/</span>);\r\n});\r\n\r\n<span class=\"hljs-title hljs-function\">it</span>(<span class=\"hljs-string\">'but there is a \"stop\" in Christoph'</span>, <span class=\"hljs-function\">() =></span> {\r\n  <span class=\"hljs-title hljs-function\">expect</span>(<span class=\"hljs-string\">'Christoph'</span>).<span class=\"hljs-title hljs-function\">toMatch</span>(<span class=\"hljs-regexp\">/stop/</span>);\r\n});\n</code></pre>\n<h3>Array</h3>\n<p>Để kiểm tra giá trị có trong một mảng, bạn có thể dùng toContain:</p>\n<pre><code class=\"hljs language-scss\">const array = <span class=\"hljs-selector-attr\">[1, 2, 10, 1000]</span>;\r\n<span class=\"hljs-built_in\">it</span>('array has <span class=\"hljs-number\">1000</span> on it', () => {\r\n  <span class=\"hljs-built_in\">expect</span>(array)<span class=\"hljs-selector-class\">.toContain</span>(<span class=\"hljs-number\">1000</span>);\r\n});\n</code></pre>\n<h3>Exceptions</h3>\n<p>Để kiểm tra một lỗi có thể xảy ra bạn có thể sử dụng <code>toThrow</code>:</p>\n<pre><code class=\"hljs language-scss\">function <span class=\"hljs-built_in\">compileAndroidCode</span>() {\r\n  throw new <span class=\"hljs-built_in\">ConfigError</span>('you are using the wrong JDK');\r\n}\r\n\r\n<span class=\"hljs-built_in\">test</span>('compiling android goes as expected', () => {\r\n  <span class=\"hljs-built_in\">expect</span>(compileAndroidCode)<span class=\"hljs-selector-class\">.toThrow</span>();\r\n  <span class=\"hljs-built_in\">expect</span>(compileAndroidCode)<span class=\"hljs-selector-class\">.toThrow</span>(ConfigError);\r\n\r\n  <span class=\"hljs-comment\">// You can also use the exact error message or a regexp</span>\r\n  <span class=\"hljs-built_in\">expect</span>(compileAndroidCode)<span class=\"hljs-selector-class\">.toThrow</span>('you are using the wrong JDK');\r\n  <span class=\"hljs-built_in\">expect</span>(compileAndroidCode)<span class=\"hljs-selector-class\">.toThrow</span>(/JDK/);\r\n});\n</code></pre>\n<h1>Một số ví dụ</h1>\n<h2>Test một action trong redux</h2>\n<pre><code class=\"hljs language-ini\">const <span class=\"hljs-attr\">CHANGE_EMAIL</span> = <span class=\"hljs-string\">'CHANGE_EMAIL'</span><span class=\"hljs-comment\">;</span>\r\n\r\nfunction changeEmail(email) {\r\n  return {\r\n    type: CHANGE_EMAIL,\r\n    email\r\n  }\r\n}\r\n\r\nit('should render type and email of change email action', () => {\r\n  const <span class=\"hljs-attr\">email</span> = <span class=\"hljs-string\">'test@tt.com'</span><span class=\"hljs-comment\">;</span>\r\n  const <span class=\"hljs-attr\">expected</span> = {\r\n    type: CHANGE_EMAIL,\r\n    email,\r\n  }\r\n\r\n  expect(changeEmail(email)).toEqual(expected)<span class=\"hljs-comment\">;</span>\r\n})<span class=\"hljs-comment\">;</span>\n</code></pre>\n<h2>Test một event trong Jquery</h2>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-built_in\">it</span>('should fire a alert', () => {\r\n  const alert = jest<span class=\"hljs-selector-class\">.fn</span>();\r\n\r\n  document<span class=\"hljs-selector-class\">.body</span><span class=\"hljs-selector-class\">.innerHTML</span> =\r\n    '&#x3C;<span class=\"hljs-selector-tag\">div</span>>' +\r\n    '  &#x3C;<span class=\"hljs-selector-tag\">span</span> id=\"username\" />' +\r\n    '  &#x3C;<span class=\"hljs-selector-tag\">button</span> id=\"<span class=\"hljs-selector-tag\">button</span>\" />' +\r\n    '&#x3C;/<span class=\"hljs-selector-tag\">div</span>>';\r\n\r\n  $('#button')<span class=\"hljs-selector-class\">.click</span>(() => {\r\n    <span class=\"hljs-built_in\">alert</span>('click');\r\n  });\r\n\r\n  $('#button')<span class=\"hljs-selector-class\">.click</span>();\r\n  <span class=\"hljs-built_in\">expect</span>(alert)<span class=\"hljs-selector-class\">.toBeCalled</span>();\r\n\r\n  <span class=\"hljs-comment\">// the mock function is called one time</span>\r\n  <span class=\"hljs-built_in\">expect</span>(alert.mock.calls.length)<span class=\"hljs-selector-class\">.toBe</span>(<span class=\"hljs-number\">1</span>);\r\n\r\n  <span class=\"hljs-comment\">// The first argument of the first call to the function was click</span>\r\n  <span class=\"hljs-built_in\">expect</span>(alert.mock.calls[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>])<span class=\"hljs-selector-class\">.toBe</span>('click');\r\n});\n</code></pre>\n<p>Bạn có thể thấy <code>const alert = jest.fn();</code>. Đây là một tính năng trong Jest giúp bạn mock một function. Hay mô phỏng lại hàm cần test.</p>\n<h2>Test với module axios</h2>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">const</span> axios = require(<span class=\"hljs-string\">'axios'</span>);\r\n\r\njest.mock(<span class=\"hljs-string\">'axios'</span>, () => ({\r\n  <span class=\"hljs-keyword\">get</span>: jest.fn().mockResolvedValue({ <span class=\"hljs-keyword\">data</span>: { message: <span class=\"hljs-string\">'hello'</span> }})\r\n}));\r\n\r\ntest(<span class=\"hljs-string\">'mock axios.get'</span>, async () => {\r\n  <span class=\"hljs-keyword\">const</span> response = await axios.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-string\">'https://test.com/t/1'</span>);\r\n  <span class=\"hljs-keyword\">expect</span>(response.<span class=\"hljs-keyword\">data</span>).toEqual({ foo: <span class=\"hljs-string\">'bar'</span> });\r\n});\n</code></pre>\n<p>Trong ví dụ này mình đã mock module axios, và đặt giá trị trả về cho hàm get. Như vậy khi test bạn sẽ không cần phải gửi request thật, tránh mất thời gian. Các module khác bạn cũng có thể làm cách tương tự.</p>"},"__N_SSG":true}